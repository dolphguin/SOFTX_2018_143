/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Website:  https://openfoam.org Version:  2.1.x                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      dynamicMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dynamicFvMesh   dynamicRefineBalancedFvMesh;

multiCritRefinementControls
{
    enableMultiCritRefinementControl  true;

    writeDebugFields true;

    fields // must be scalarFields
    (
        //alpha (min max refineLevel)
//        alpha1 (0.01 0.99 2) // refine cells where alpha in [0.01:0.99] with maximal 2 refinement layers
//                isInterface (0.1 1.1 2)
    );

    interface // must be a scalarField (only one dictionary!)
    (
/*
        alpha.water // refine interface (found based on snGrad of alpha > 0.1)
        {
            innerRefLayers 4; // describes how many cell layers inside phase alpha are to be refined
            outerRefLayers 4; // describes how many cell layers outside phase alpha are to be refined
            // optional settings:
            maxRefineLevel 2; // max refinement layers; Default: maxRefinement from dynamicRefineFvMeshCoeffs is used
            // to get slower than 2:1 refinement; add #nAddLayers between each refinement level at the interface
            nAddLayers -1; // default: nAddLayers=0
        }
*/
    );


    gradients // must be scalars
    (
        // arguments as in 'fields'
        // min/max values are based on mag(fvc::grad(volScalarField)) * cellVolume
//        T    (0.01 10 1)

    );

    curls // must be vectors
    (
        // arguments as in 'fields'
        // min/max values are based on mag(fvc::curl(volVectorField))
//        U   (0.5 1 2)
    );

    regions
    (
        boxToCell
        {
            minLevel 2;

            //box (0 0.003 0)(0.001 0.0055 1);
            box (0.00 0 0)(0.001 0.001 0.001);
        }
    );


}

dynamicRefineFvMeshCoeffs
{
    // Extra entries for balancing
    enableBalancing true;
    allowableImbalance 0.05;

    // How often to refine
    refineInterval  2;

    // Field to be refinement on (set it to 'internalRefinementField' to use the
    // refinementControls dictionary entries above)
    field           multiCritRefinementField;

    // Refine field inbetween lower..upper
    lowerRefineLevel 0.5;
    upperRefineLevel 3.5; // maxRefinement+0.5

    // If value < unrefineLevel unrefine
    unrefineLevel   -0.5;

    // Have slower than 2:1 refinement
    nBufferLayers   0;

    // Refine cells only up to maxRefinement levels
    maxRefinement   3;

    // Stop refinement if maxCells reached
    maxCells        200000;

    // Flux field and corresponding velocity field. Fluxes on changed
    // faces get recalculated by interpolating the velocity. Use 'none'
    // on surfaceScalarFields that do not need to be reinterpolated.
    correctFluxes
    (
        (mySurfaceScalarField   none)
        (mySurfaceScalarField_0 none)
    );

    mapSurfaceFields
    (
        mySurfaceScalarField
        mySurfaceVectorField
        mySurfaceScalarField_0
        mySurfaceVectorField_0
    );

    // Write the refinement level as a volScalarField
    dumpLevel       true;
}


// ************************************************************************* //
